name: test (Linux)

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  check_skip:
    name: 'Skip job? (Linux)'
    continue-on-error: true
    runs-on: ubuntu-latest

    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths: '["tpie/**", "test/**"]'

    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

  build_and_test:
    name: 'Build + Test (Linux, ${{matrix.cc.cc}}-${{matrix.cc.v}}, ${{matrix.build_type}})'
    runs-on: ${{ matrix.os }}

    needs: check_skip
    if: ${{ needs.check_skip.outputs.should_skip != 'true' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        cc:
          # GNU Compiler
          - { cc: gcc,   v: 10, cxx: g++ } # oldest possible
          - { cc: gcc,   v: 11, cxx: g++ } # default
          - { cc: gcc,   v: 12, cxx: g++ } # newest

          # Clang Compiler
          - { cc: clang, v: 11, cxx: clang++ } # oldest possible
          - { cc: clang, v: 14, cxx: clang++ } # default
          - { cc: clang, v: 15, cxx: clang++ } # newst possible

    env:
      cc: ${{matrix.cc.cc}}-${{matrix.cc.v}}
      cxx: ${{matrix.cc.cxx}}-${{matrix.cc.v}}
      macro_flags: '-DLZ4_compress_default\(a,b,c,d\)=LZ4_compress\(a,b,c\)'

    steps:
    # Git repo set up
    - name: Checkout commit
      uses: actions/checkout@v2

    # Installation Linux
    - name: Install dependencies
      run: |
        sudo apt update

        echo "================================"
        echo "Compiler"
        sudo apt install build-essential
        sudo apt install ${{matrix.cc.cc}}-${{matrix.cc.v}}

        echo "================================"
        echo "Boost"
        sudo apt install libboost-all-dev

        echo "================================"
        echo "Snappy"
        sudo apt install libsnappy-dev

        echo "================================"
        echo "LZ4"
        sudo apt install liblz4-dev

        echo "================================"
        echo "ZSTD"
        export CC=${{env.cc}}
        export CCX=${{env.cxx}}
        export MACRO_FLAGS="${{env.macro_flags}}"

        git clone https://github.com/facebook/zstd
        cd zstd
        git checkout tags/v1.3.1
        sudo make install

    # CMake build and run
    - name: CMake build
      working-directory: ${{runner.workspace}}
      run: |
        export CC=${{env.cc}}
        if [ "${{ matrix.cc.cc }}" != "gcc" ] ;
        then
          export CXX=${{env.cxx}}
        fi
        export MACRO_FLAGS="${{env.macro_flags}}"

        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake -D CMAKE_BUILD_TYPE="${{matrix.build_type}}" -D CMAKE_CXX_STANDARD=17 -D CMAKE_C_FLAGS="$MACRO_FLAGS" -D CMAKE_CXX_FLAGS="$MACRO_FLAGS" ..

        make -j2

    - name: CTest run
      working-directory: ${{github.workspace}}/build
      run: ctest --timeout 30

    # Check if tests are missing
    - name: Check missing CTests
      working-directory: ${{github.workspace}}
      run: |
        sudo apt install python3 python3-pip
        pip install cmakeast
        python3 scripts/check_missing_ctests.py

  skip:
    name: 'Build + Test (Linux, ${{matrix.cc.cc}}-${{matrix.cc.v}}, ${{matrix.build_type}})'
    runs-on: ubuntu-latest

    needs: check_skip
    if: ${{ needs.check_skip.outputs.should_skip == 'true' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        cc:
          # GNU Compiler
          - { cc: gcc,   v: 10, cxx: g++ } # oldest possible
          - { cc: gcc,   v: 11, cxx: g++ } # default
          - { cc: gcc,   v: 12, cxx: g++ } # newest

          # Clang Compiler
          - { cc: clang, v: 11, cxx: clang++ } # oldest possible
          - { cc: clang, v: 14, cxx: clang++ } # default
          - { cc: clang, v: 15, cxx: clang++ } # newst possible

    steps:
    - name: Echo skip
      run: |
        echo "Running unit tests is skipped"
