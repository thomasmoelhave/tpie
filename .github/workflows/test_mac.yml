name: test (Mac OS)

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  check_skip:
    name: 'Skip job? (Mac OS)'
    continue-on-error: true
    runs-on: ubuntu-latest

    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths: '["tpie/**", "test/**"]'

    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

  build_and_test:
    name: 'Build + Test (Mac OS, ${{matrix.cc.cc}}@${{matrix.cc.v || matrix.cc.xcode}}, ${{matrix.build_type}})'
    runs-on: ${{ matrix.os }}

    needs: check_skip
    if: ${{ needs.check_skip.outputs.should_skip != 'true' }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        build_type: [Release, Debug]
        cc:
          # GNU Compiler
          - { cc: gcc,   v: 7,  cxx: g++, xcode: latest }
          - { cc: gcc,   v: 10, cxx: g++, xcode: latest }
          - { cc: gcc,   v: 12, cxx: g++, xcode: latest }

          # Clang Compiler
          - { cc: clang, cxx: clang++, xcode: 13.1 } # oldest
          - { cc: clang, cxx: clang++, xcode: 13.4 }
          - { cc: clang, cxx: clang++, xcode: 14.0 }
          - { cc: clang, cxx: clang++, xcode: 14.2 } # newest

    steps:
    # Git repo set up
    - name: Checkout commit
      uses: actions/checkout@v2

    # Install dependencies
    - name: Install xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{matrix.cc.xcode}}

    - name: Install dependencies
      run: |
        brew update

        if ["${{matrix.cc.cc}}" == "gcc"];
        then
          echo "================================"
          echo "Compiler"
          brew install ${{matrix.cc.cc}}@${{matrix.cc.v}}
        fi

        echo "================================"
        echo "Boost"
        brew install boost

        echo "================================"
        echo "Snappy"
        brew install snappy

        echo "================================"
        echo "LZ4"
        brew install lz4

        echo "================================"
        echo "ZSTD"
        brew install zstd

    # CMake build and run
    - name: CMake build
      working-directory: ${{runner.workspace}}
      run: |
        if [ "${{ matrix.cc.cc }}" == "gcc" ] ;
        then
          export CC=/usr/bin/${{matrix.cc.cc}}
          export CXX=/usr/bin/${{matrix.cc.cxx}}
        else
          export CC=${{matrix.cc.cc}}
          export CXX=${{matrix.cc.cxx}}
        fi

        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake -D CMAKE_BUILD_TYPE="${{matrix.build_type}}" -D CMAKE_CXX_STANDARD=17 ..

        make -j2

    - name: CTest run
      working-directory: ${{github.workspace}}/build
      run: ctest --timeout 30

    # Check if tests are missing
    - name: Check missing CTests
      working-directory: ${{github.workspace}}
      run: |
        brew install python3
        pip3 install cmakeast
        python3 scripts/check_missing_ctests.py

  skip:
    name: 'Build + Test (Mac OS, ${{matrix.cc.cc}}@${{matrix.cc.v || matrix.cc.xcode}}, ${{matrix.build_type}})'
    runs-on: ubuntu-latest

    needs: check_skip
    if: ${{ needs.check_skip.outputs.should_skip == 'true' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        cc:
          # GNU Compiler
          - { cc: gcc,   v: 10, cxx: g++ } # oldest possible
          - { cc: gcc,   v: 11, cxx: g++ } # default
          - { cc: gcc,   v: 12, cxx: g++ } # newest

          # Clang Compiler
          - { cc: clang, v: 11, cxx: clang++ } # oldest possible
          - { cc: clang, v: 14, cxx: clang++ } # default
          - { cc: clang, v: 15, cxx: clang++ } # newst possible

    steps:
    - name: Echo skip
      run: |
        echo "Running unit tests is skipped"

